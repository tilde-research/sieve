import re

def extract_book_titles(text: str) -> tuple:
    # Matches book titles in double quotes, excluding titles following punctuation or parentheses.
    titles = re.findall(r'(?<![.?!()])"([^"]+)"', text)
    return text, titles

<BREAK>

import re

def normalize_dates(text: str) -> str:
    # Normalize dates to the format YYYY-MM-DD
    text = re.sub(r'\b(\d{1,2})[./-](\d{1,2})[./-](\d{4})\b', lambda m: f'{m.group(3)}-{int(m.group(2)):02}-{int(m.group(1)):02}', text)
    return text

<BREAK>

import re

def highlight_longest_word(text: str) -> str:
    # Match and highlight the longest word
    longest_word = max(re.findall(r'\b\w+\b', text), key=len, default="")
    if longest_word:
        text = re.sub(rf'\b{longest_word}\b', f'<highlight>{longest_word}</highlight>', text)
    return text

<BREAK>

import re

def identify_acronyms(text: str) -> tuple:
    # Extract acronyms from the text
    acronyms = re.findall(r'\b(?:[A-Z]\.?){2,}\b', text)
    return text, acronyms

<BREAK>

import re

def camel_to_snake(text: str) -> str:
    # Replace CamelCase/PascalCase with snake_case
    text = re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()
    return text

<BREAK>

import re

def find_palindromes(text: str) -> tuple:
    # Match palindromic words of at least 4 characters
    palindromes = [word for word in re.findall(r'\b\w{4,}\b', text) if word.lower() == word.lower()[::-1]]
    return text, palindromes

